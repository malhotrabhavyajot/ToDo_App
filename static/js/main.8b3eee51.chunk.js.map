{"version":3,"sources":["Todolist.js","App.js","serviceWorker.js","index.js"],"names":["Todolist","props","className","type","onChange","changed","value","class","onClick","click","App","state","tasks","currentTask","text","key","inputHandler","bind","taskAdd","taskChanged","deleteTask","e","this","setState","target","Date","now","console","log","preventDefault","newTask","task","map","taskid","taskdelete","splice","todolist","item","onSubmit","placeholder","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+SA4BeA,G,YAzBE,SAACC,GACd,OACI,yBAAKC,UAAU,QACX,2BACA,2BAAOC,KAAK,OACRC,SAAUH,EAAMI,QAChBC,MAAOL,EAAMK,QACjB,8BACA,2BAAOC,MAAM,aAAb,WACQ,2BAAOJ,KAAK,WAAWD,UAAU,WAAWI,MAAM,aAClD,0BAAMC,MAAM,eAEZ,4BAAQL,UAAU,MAAMM,QAASP,EAAMQ,OAAvC,eC6FLC,E,YArGb,WAAYT,GAAO,IAAD,8BAChB,4CAAMA,KACDU,MAAM,CACTC,MAAM,GACNC,YAAY,CACVC,KAAK,GACLC,IAAI,KAIR,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKG,WAAa,EAAKA,WAAWH,KAAhB,gBAbF,E,0EAgBLI,GACXC,KAAKC,SAAS,CACZV,YAAY,CACVC,KAAMO,EAAEG,OAAOlB,MACfS,IAAKU,KAAKC,SAGdC,QAAQC,IAAIN,KAAKX,S,8BAGZU,GACNA,EAAEQ,iBACF,IAAMC,EAAUR,KAAKX,MAAME,YAC3B,GAAoB,KAAjBiB,EAAQhB,KAAY,CACrB,IAAMiB,EAAI,sBAAOT,KAAKX,MAAMC,OAAlB,CAAwBkB,IAClCR,KAAKC,SAAS,CACZX,MAAOmB,EACPlB,YAAY,CACVC,KAAK,GACLC,IAAI,MAGRY,QAAQC,IAAIN,KAAKX,U,kCAKTG,EAAKC,GACf,IAAMgB,EAAOT,KAAKX,MAAMC,MACxBmB,EAAKC,KAAI,SAAAC,GACJA,EAAOlB,MAAMA,IACdY,QAAQC,IAAIK,EAAOlB,IAAI,IAAIA,GAC3BkB,EAAOnB,KAAOA,MAGlBQ,KAAKC,SAAS,CACZX,MAAOmB,M,iCAIAhB,GACTY,QAAQC,IAAIb,GACb,IAAMmB,EAAaZ,KAAKX,MAAMC,MAC9BsB,EAAWC,OAAOpB,EAAI,GACrBO,KAAKC,SAAS,CACZQ,KAAMG,M,+BAIA,IAAD,OAGDE,EACH,6BACGd,KAAKX,MAAMC,MAAMoB,KAAI,SAACK,EAAKtB,GAC1B,OAAQ,kBAAC,EAAD,CACRA,IAAKsB,EAAKtB,IAEVT,MAAO+B,EAAKvB,KACZL,MAAO,kBAAM,EAAKW,WAAWL,IAC7BV,QAAS,SAACgB,GAAD,OAAK,EAAKF,YAAYE,EAAEG,OAAOlB,MAAM+B,EAAKtB,YAKzD,OACE,6BACE,wBAAIb,UAAU,OAAd,aACF,yBAAKA,UAAU,QACb,gCACE,0BAAMA,UAAU,SAASoC,SAAUhB,KAAKJ,SACtC,2BAAOf,KAAK,OAAOoC,YAAY,mBAC7BjC,MAAOgB,KAAKX,MAAME,YAAYC,KAC9BV,SAAUkB,KAAKN,eAEjB,4BAAQwB,GAAG,SAASrC,KAAK,UAAzB,QAEFiC,S,GA/FQK,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8b3eee51.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Todolist.css';\r\n\r\nconst Todolist = (props) => {\r\n    return(\r\n        <div className=\"list\">\r\n            <p>\r\n            <input type=\"text\"\r\n                onChange={props.changed}\r\n                value={props.value} ></input>\r\n            <span>\r\n            <label class=\"container\">Complete\r\n                    <input type=\"checkbox\" className=\"checkbox\" value=\"Complete\"></input>\r\n                    <span class=\"checkmark\"></span>\r\n            </label>\r\n                    <button className=\"btn\" onClick={props.click}>Delete</button>\r\n            </span>\r\n      \r\n            </p>\r\n        \r\n        </div>\r\n      \r\n    )\r\n\r\n \r\n}\r\n\r\n\r\nexport default Todolist;","import React from 'react';\r\nimport './App.css';\r\nimport Todolist from './Todolist';\r\n\r\n\r\nclass App extends React.Component{\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      tasks:[],\r\n      currentTask:{\r\n        text:'',\r\n        key:''\r\n      }\r\n    }\r\n\r\n    this.inputHandler = this.inputHandler.bind(this);\r\n    this.taskAdd = this.taskAdd.bind(this);\r\n    this.taskChanged = this.taskChanged.bind(this);\r\n    this.deleteTask = this.deleteTask.bind(this);\r\n  }\r\n\r\n  inputHandler(e){\r\n    this.setState({\r\n      currentTask:{\r\n        text: e.target.value,\r\n        key: Date.now()\r\n      }\r\n    })\r\n    console.log(this.state)\r\n  }\r\n\r\n taskAdd(e){\r\n   e.preventDefault();\r\n   const newTask = this.state.currentTask;\r\n   if(newTask.text !== \"\"){\r\n     const task = [...this.state.tasks,newTask];\r\n     this.setState({\r\n       tasks: task,\r\n       currentTask:{\r\n         text:'',\r\n         key:''\r\n       }\r\n     })\r\n     console.log(this.state)\r\n   }\r\n \r\n }\r\n\r\n taskChanged(text,key){\r\n   const task = this.state.tasks;\r\n   task.map(taskid=>{\r\n     if(taskid.key===key){\r\n       console.log(taskid.key+\" \"+key);\r\n       taskid.text = text;\r\n     }\r\n   });\r\n   this.setState({\r\n     tasks: task\r\n   });\r\n }\r\n\r\n deleteTask(key){\r\n   console.log(key);\r\n  const taskdelete = this.state.tasks;\r\n  taskdelete.splice(key,1);\r\n   this.setState({\r\n     task: taskdelete\r\n   })\r\n }\r\n\r\n  render(){\r\n  \r\n      \r\n   const todolist = (\r\n      <div>\r\n        {this.state.tasks.map((item,key)=>{\r\n          return  <Todolist \r\n          key={item.key}\r\n          //items={this.state.task}\r\n          value={item.text}\r\n          click={() => this.deleteTask(key)}\r\n          changed={(e)=>this.taskChanged(e.target.value,item.key)}></Todolist>\r\n        })}\r\n        \r\n      </div>\r\n    );\r\n    return(\r\n      <div>\r\n        <h1 className=\"App\">ToDo List</h1>\r\n      <div className=\"main\">\r\n        <header>\r\n          <form className=\"formtd\" onSubmit={this.taskAdd}>\r\n            <input type=\"text\" placeholder=\"Enter Task To do\" \r\n              value={this.state.currentTask.text} \r\n              onChange={this.inputHandler}/>\r\n              \r\n            <button id=\"btnAdd\" type=\"submit\">Add</button>\r\n          </form>\r\n         {todolist}\r\n        </header>\r\n      </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}